//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerOneActions"",
            ""id"": ""a5bdbe3c-6138-4a5a-b6ab-6fb3496a5591"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e058eeed-9fc9-46d1-83c6-289bf931e051"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2d67248f-736e-47fa-9b76-00fc6a7d6f58"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f8b962c6-22f9-4d1a-bfe5-b889919a2853"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""14fd455e-0546-4a4c-8eb1-27bdefa75e06"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cb64febf-df50-48ab-a215-6d1da01d2a9b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a226ed0b-9c27-45f9-b849-62c8fd8685e2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""PlayerTwoActions"",
            ""id"": ""fe212297-50bf-4582-a05b-6f0587ab4eb7"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6f802a0a-0ee4-4190-9bbe-7ca5ca12c648"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6d6a2771-9a72-486f-8d18-3d15e66967df"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""384427cf-136f-4daa-a2ff-a420951309b0"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fe4fe6cd-8ff9-48ce-a5a2-7f6df7f2ff26"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""22ecc9fa-f203-4089-8e83-9f3488bed4c1"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""477bcd79-4d1f-4654-babc-2918daa03624"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerOneActions
        m_PlayerOneActions = asset.FindActionMap("PlayerOneActions", throwIfNotFound: true);
        m_PlayerOneActions_Movement = m_PlayerOneActions.FindAction("Movement", throwIfNotFound: true);
        // PlayerTwoActions
        m_PlayerTwoActions = asset.FindActionMap("PlayerTwoActions", throwIfNotFound: true);
        m_PlayerTwoActions_Movement = m_PlayerTwoActions.FindAction("Movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerOneActions
    private readonly InputActionMap m_PlayerOneActions;
    private IPlayerOneActionsActions m_PlayerOneActionsActionsCallbackInterface;
    private readonly InputAction m_PlayerOneActions_Movement;
    public struct PlayerOneActionsActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerOneActionsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerOneActions_Movement;
        public InputActionMap Get() { return m_Wrapper.m_PlayerOneActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerOneActionsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerOneActionsActions instance)
        {
            if (m_Wrapper.m_PlayerOneActionsActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerOneActionsActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerOneActionsActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerOneActionsActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_PlayerOneActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public PlayerOneActionsActions @PlayerOneActions => new PlayerOneActionsActions(this);

    // PlayerTwoActions
    private readonly InputActionMap m_PlayerTwoActions;
    private IPlayerTwoActionsActions m_PlayerTwoActionsActionsCallbackInterface;
    private readonly InputAction m_PlayerTwoActions_Movement;
    public struct PlayerTwoActionsActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerTwoActionsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerTwoActions_Movement;
        public InputActionMap Get() { return m_Wrapper.m_PlayerTwoActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerTwoActionsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerTwoActionsActions instance)
        {
            if (m_Wrapper.m_PlayerTwoActionsActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerTwoActionsActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerTwoActionsActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerTwoActionsActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_PlayerTwoActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public PlayerTwoActionsActions @PlayerTwoActions => new PlayerTwoActionsActions(this);
    public interface IPlayerOneActionsActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IPlayerTwoActionsActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
}
